class Solution {
    public List<Integer> largestDivisibleSubset(int[] nums) {
        if(nums == null || nums.length == 0) return new ArrayList<>();
        Arrays.sort(nums);
        int n = nums.length;
        int[] dp = new int[n];
        int[] prev = new int[n];
        for(int i = 0; i < n; i++){
            dp[i] = 1;
            prev[i] = -1;
        }
        int maxSize = 1;
        int maxIndex = 0;
        for(int i = 0; i < n; i++){
            for(int j = 0; j < i; j++){
                if(nums[i] % nums[j] == 0){
                    if(dp[i] < dp[j] + 1){
                        dp[i] = dp[j] + 1;
                        prev[i] = j;
                    }
                }
            }
            if(dp[i] > maxSize){
                maxSize = dp[i];
                maxIndex = i;
            }
        }
        List<Integer> res = new ArrayList<Integer>();
        for(int i = maxIndex; i >= 0; i = prev[i]){
            res.add(nums[i]);
            if(prev[i] == -1) break;
        }
        Collections.reverse(res);
        return res;
    }
}